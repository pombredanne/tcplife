#! /usr/bin/env stap
/*
 *      Copyright (C) 2013 Yann Rouillard
 *      This script is free software.  You can redistribute it and/or modify
 *      it under the terms of the GNU General Public License (GPL);
 *      either version 2, or (at your option) any later version.
 *      
 *      Version 0.1    yann@pleiades.fr.eu.org    2013-09-16
 *
 */

/***************************************************************************************
  Global variables
 **************************************************************************************/

/* 
    These variables are used as an array to store the internal state of the each TCP
    connection followed.
    The "struct sock *sk" variable is used as a key of these associatives arrays
 */

global cnx_tcp_state;      /* TCP Congestion state (Open, Disorder, CWR, Recovery, Loss) */
global cnx_tcp_cwnd;       /* TCP Congestion window */
global cnx_tcp_sndbuf;     /* TCP Sending buffer size */
global cnx_slow_start;     /* equal to 1 if slow start was used to increment cwnd */
global cnx_cwnd_moderated; /* equal to 1 if cwnd was moderated */
global cnx_send_head;


/***************************************************************************************
  Useful functions
 **************************************************************************************/

/* 
    Given a struck sock, print the internal status of the tcp connection
    (congestion state, sending buffer size...)

    Note: max_sndbuf must retrieved by the sender and passed as an argument, 
          using the follow line:
	     max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
          The reason is that this sentence can't be used in a function except
          in recent versions of systemtap.
*/
function display_connection_info(sk:long, max_sndbuf:long)
{
	snd_ssthresh = @cast(sk, "tcp_sock")->snd_ssthresh
	if (snd_ssthresh == 2147483647)
		snd_ssthresh = 0

	tcp_left_out = @cast(sk, "tcp_sock")->sacked_out + @cast(sk, "tcp_sock")->lost_out
	packet_in_flights = @cast(sk, "tcp_sock")->packets_out - tcp_left_out + @cast(sk, "tcp_sock")->retrans_out;

	printf ("%s Status: sndbuf:%i/%i/%i, snd_wnd:%i/%i cwnd:%i/%i ssthresh:%i congestion_state:%s\n",
		tcp_connection_info(sk),
		@cast(sk, "sock")->sk_wmem_queued,
	        @cast(sk, "sock")->sk_sndbuf,
		max_sndbuf,
		@cast(sk, "tcp_sock")->snd_nxt - @cast(sk, "tcp_sock")->snd_una,
		@cast(sk, "tcp_sock")->snd_wnd,
		packet_in_flights,
		@cast(sk, "tcp_sock")->snd_cwnd,
		snd_ssthresh,
		tcp_state(@cast(sk, "inet_connection_sock")->icsk_ca_state));
}


/* 
    Given a struck sock, display an event and the current connection info.
    If update_state is set to 1, it will also print the state modification
    and save the new internal state.

    Note: max_sndbuf must retrieved by the sender and passed as an argument, 
          using the follow line:
	     max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
          The reason is that this sentence can't be used in a function except
          in recent versions of systemtap.
*/
function display_event(sk:long, event:string, max_sndbuf:long, show_info:long, update_state:long)
{
	new_state = @cast(sk, "inet_connection_sock")->icsk_ca_state;
	printf ("%s Event: %s", tcp_connection_info(sk), event)
	if (update_state != 0) {
		printf (", changing state %s -> %s", tcp_state(cnx_tcp_state[sk]), tcp_state(new_state));
		cnx_tcp_state[sk] = new_state;
	}
	printf ("\n");
	if (show_info)
		display_connection_info(sk, max_sndbuf);
}

/* 
    These variables are used as an array to store the internal state of the each TCP
    connection followed.
*/
function tcp_state:string(state:long)
{
	if (state == 0) return ("Open");
	if (state == 1) return ("Disorder");
	if (state == 2) return ("CWR");
	if (state == 3) return ("Recovery");
	if (state == 4) return ("Loss");
}

/* 
    Given a struck sock, return a string containing the source adresse/port and the 
    destination adress port on the form SRC_IP:SRC_PORT <-> DST_IP:DST_PORT
*/
function tcp_connection_info:string(sk:long)
{
	return (sprintf("%s:%d <-> %s:%d",
			ip_ntop(htonl(tcpmib_local_addr(sk))),
			tcpmib_local_port(sk),
			ip_ntop(htonl(tcpmib_remote_addr(sk))),
			tcpmib_remote_port(sk)));
}


/* This function reproduce the behavior of the real tcp_snd_wnd_test kernel function
   we have to do this as this function is inlined and we can't intercept the return
   values of inline functions */
function tcp_snd_wnd_test:long(sk:long, mss_now:long)
{
	skb = cnx_send_head[sk];
	cb = @cast(skb, "sk_buff")->cb;
	if (@cast(skb, "sk_buff")->len > mss_now) {
		end_seq = @cast(cb, "tcp_skb_cb")->end_seq
	} else {
		end_seq = @cast(cb, "tcp_skb_cb")->seq + mss_now;
	}

	snd_una = @cast(sk, "tcp_sock")->snd_una;
	snd_wnd = @cast(sk, "tcp_sock")->snd_wnd;
	tcp_wnd_end = snd_una + snd_wnd;

	return (end_seq < tcp_wnd_end);
}

/* This function reproduce the behavior of the real tcp_cwnd_test kernel function
   we have to do this as this function is inlined and we can't intercept the return
   values of inline functions */
function tcp_cwnd_test:long(sk:long)
{
	tcp_left_out = @cast(sk, "tcp_sock")->sacked_out + @cast(sk, "tcp_sock")->lost_out;
	in_flight = @cast(sk, "tcp_sock")->packets_out - tcp_left_out + @cast(sk, "tcp_sock")->retrans_out;
	cwnd = @cast(sk, "tcp_sock")->snd_cwnd;
	return (in_flight < cwnd);
}


/***************************************************************************************
  Probe functions
 **************************************************************************************/

/*** Flow control related probes ***/

/* 
   This function is enter for each data packed that has to be sent 
   It will try to send the packet but not necessarily succeed 
   for various reason (congestion window full, sending window full...)

   To check if a packet has been sent or not, we store the address of 
   the next packet to be sent at the call of the function
 */
probe kernel.function("tcp_write_xmit")
{
	cnx_send_head[$sk] = $sk->sk_send_head;
}


probe kernel.function("tcp_write_xmit").return
{
	if (cnx_send_head[$sk] != @cast($sk, "sock")->sk_send_head) {
		/* The head of the packet queue has changed, it means
                   a packet has been sent */
		next;
	}

	/* Oups ! Packet not sent ! We will try to find the reason */

	if (!tcp_snd_wnd_test($sk, $mss_now)) {
		max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
		display_event ($sk, "Send window full", max_sndbuf, 1, 0);
		next;
	}

	if (!tcp_cwnd_test($sk)) {
		max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
		display_event ($sk, "Congestion window full", max_sndbuf, 1, 0);
		next;
	} 

	/* We can be here if the packet has not been set for other reasons
           (nagle algorithm, tso deferring...) 
           We are not interested in those other cases currently */
     
}


/* 
   The kernel enters sk_stream_wait_memory if it couldn't allocate memory for a new frame.
   This can happen for two reasons:
    - the sender buffer was full,
    - there is not enough memory for the 
   The kernel will sleep in this function waiting for some memory. 
 */
probe kernel.function("sk_stream_wait_memory")
{
	socket_flags = $sk->sk_socket->flags;
	max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];

	if (socket_flags & 0x4) /* SOCK_NOSPACE */
		event = "Application blocked on send (sender buffer full)"
	else
		event = "Application blocked on send (insufficient memory)"

	display_event ($sk, event, max_sndbuf, 1, 0);
}


/*
    If we returned from this function, it means that we have enough
    memory to allocate a frame and send a packet at least.
 */
probe kernel.function("sk_stream_wait_memory").return
{
	max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
	display_event ($sk, "Application unblocked on send", max_sndbuf, 1, 0);
}


/*
    Sender buffer increase is done in tcp_new_space but it's an inline
    function and we can't probe its returns state, so we probe instead
    sk_stream_write_space which is called at the end of tcp_new_space
 */
probe kernel.function("sk_stream_write_space").return
{
	if (cnx_tcp_sndbuf[$sk] != $sk->sk_sndbuf) {
		if ($sk->sk_sndbuf > cnx_tcp_sndbuf[$sk])
			event = "Sender buffer increase";
		else
			event = "Sender buffer decrease";
		max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
		display_event ($sk, event, max_sndbuf, 1, 0);
		cnx_tcp_sndbuf[$sk] = $sk->sk_sndbuf;
	}
}


probe kernel.function("tcp_transmit_skb").return
{
	/* A return code > 0 can mean packet dropped, congestion notification or removed by policy
           (see NET_XMIT_XXXX code in include/linux/netdevice.h)
           in all case this is interpreted as a local device congestion notification */
	if ($return != 0) {
		max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
		display_event ($sk, sprintf("Local device congestion", $return), max_sndbuf, 1, 1);
	}
}


/*** Congestion control related probes ***/

/* 
   Congestion window is usually updated after each ack received, so we trace this
   function and report any modification of the congestion window.
*/
probe kernel.function("tcp_ack").return
{
	if (cnx_tcp_cwnd[$sk] != @cast($sk, "tcp_sock")->snd_cwnd) {
		max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
		if (cnx_tcp_cwnd[$sk] < @cast($sk, "tcp_sock")->snd_cwnd) {
			event = "Congestion window increase";
			if (cnx_slow_start[$sk]) {
				event = sprintf("%s (Slow start mode)", event);
				cnx_slow_start[$sk] = 0;
			} else {
				event = sprintf("%s (Congestion avoidance mode)", event);
			}
		} else {
			if (cnx_cwnd_moderated[$sk]) {
				/* cwnd moderation that happened during tcp_ack are called
                                   from tcp_fastretrans_alert and handled in its probe */
				cnx_cwnd_moderated[$sk] = 0;
				next;
			} else {
				event = "Congestion window decrease";
			}
		}

		display_event ($sk, event, max_sndbuf, 1, 0);
		cnx_tcp_cwnd[$sk] = @cast($sk, "tcp_sock")->snd_cwnd;
	}
}


/* 
   Most TCP connection congestion state modification occur in the
   tcp_fastretrans_alert function.
   So we intercept the return of this function and we guess what happened
   based on flag and the state modification.

   According to the source code comments, this function is entered:
     - for each incoming ACK, if state is not "Open"
     - when arrived ACK is unusual, namely:
	* SACK
	* Duplicate ACK.
	* ECN ECE.
*/
probe kernel.function("tcp_fastretrans_alert").return
{
	new_state = @cast($sk, "inet_connection_sock")->icsk_ca_state;
	old_state = cnx_tcp_state[$sk]

	if (new_state == old_state) {
		next;
	}

	max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];

	if ($flag & 0x40) {  /* FLAG_ECE */
		display_event ($sk, "Explicit Congestion Notification received", max_sndbuf, 1, 1);
		next;
	}

	if (old_state == 0 && new_state == 1) { /* Open -> Disorder state */

		/* Transition from Open to Disorder state happens if SACK or Duplicate ACK is received
                   It happens if tcp_time_to_recover returns false (which should be the case if we're
                   in the open state just before), in that case, tcp_try_to_open is called which will
                     - calls tcp_try_keep_open which will set the TCP_CA_Disorder state 
                     - calls tcp_moderate_cwnd which will reduce the cwnd to the amount of packets in flight */

		if ($flag & 0x20)  /* FLAG_DATA_SACKED */
			event = "Selective ack received";
		else
			if (!($flag & 0x33))  /* FLAG_NOT_DUP */
				event = "Duplicate ack received";
			else
				event = "Unknown event";

		if (cnx_cwnd_moderated[$sk]) {
			display_event ($sk, event, max_sndbuf, 0, 1);
			display_event ($sk, "Congestion window moderated", max_sndbuf, 1, 0);
			cnx_tcp_cwnd[$sk] = @cast($sk, "tcp_sock")->snd_cwnd;
			/* We don't reinitialize cnx_cwnd_moderated here, it will
                           be done by the tcp_ack probe */
		} else {
			event = "Transition to Disorder state without congestion window moderation, that shouldn't happen !";
			display_event ($sk, event, max_sndbuf, 1, 0);
		}

		next;
	}

	if (new_state == 3) {  /* -> Recovery state */
		display_event ($sk, "Retransmission timeout", max_sndbuf, 1, 1);
		next;
	}

	if (old_state == 3 && new_state == 0) { /* Recovery -> Open state */
		display_event ($sk, "Full window acknowledged", max_sndbuf, 1, 1);
		next;
	}

	display_event($sk, sprintf("Transition unknown (flag:0x%x)", $flag), max_sndbuf, 1, 1);
}


/* 
   We keep track of slow start calls to know if it was used to increase the
   congestion window
*/  
probe kernel.function("tcp_slow_start").return
{
	cnx_slow_start[$tp] = 1;
}


probe kernel.function("tcp_enter_cwr").return
{
	max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
	display_event ($sk, "Entering congestion window reduction mode", max_sndbuf, 1, 1);
}

	
probe kernel.function("tcp_enter_frto").return
{
	max_sndbuf = @var("sysctl_tcp_wmem@net/ipv4/tcp.c")[2];
	display_event ($sk, "Enabling Forward RTO Recovery algorithm", max_sndbuf, 1, 1);
}


probe kernel.function("tcp_moderate_cwnd")
{
	cnx_cwnd_moderated[$tp] = 1;
}

